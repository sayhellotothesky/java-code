java中Collections.sort()方法实现集合排序
1.Integer/String泛型的List进行排序

   List <Integer> integerlist = new ArrayList<Integer>();   //定义一个Integer泛型的List

   然后用add()方法添加一些Integer类型的数据到该List中，

   Collections.sort(integerlist);                                //因为是数值型的数据，排序即按照大小升序排序

2.自定义泛型的List进行排序

   其实Collections.sort(List)方法进行排序的前提是：List对象中的泛型类实现了Comparable接口；

   我们拿学生类来用具体的代码演示一下：

   public class Student implements Comparable<Student>{

                  int id;

                  String name;

                  ........

                  public int compareTo(Student o){               //实现接口自然要实现接口的方法

                              return  this.id.compareTo(o.id);      //规定学生对象排序的依据，这里按ID排序

                   }

   }

   然后就可以对一个由学生对象组成的List表进行Collections.sort(List)排序了（其实是按ID排序）

   Comparable接口定义的规则是默认规则。

3.Comparator接口

   这个接口可以帮助我们事先定义好各种比较规则，用的时候直接换规则，不用去改泛型对象里

   的比较方法compareTo(),

   ID排序规则（类）：

          public class comparebyid implements Comparator<Student>{

                   public int compare(Student o1,Student o2){

                            return o1.id.compareTo(o2.id);

                   }

            }

   Name排序规则（类）：

          public class comparebyname implements Comparator<Student>{

                   public int compare(Student o1,Student o2){

                            return o1.name.compareTo(o2.name);

                   }

            }

   规则定义好了，如何使用呢？

   先实例化一个规则对象，将对象传入Collections.sort()方法中：

   Collections.sort(studentlist,new comparebyname());

   这样就能忽略上面的默认规则，实现按照新的规则（姓名排序）排序了。
   对数据排序直接使用这个方法就行，但是要保证集合中的对象是 可比较的。

怎么让一个对象是 可比较的，那就需要该对象实现 Comparable<T> 接口啦。然后重写里面的 
compareTo()方法。我们可以看到Java中很多类都是实现类这个接口的 如：Integer，Long 等等。。。

假设我们有一个学生类，默认需要按学生的年龄字段 age 进行排序 代码如下：

public class Student implements Comparable<Student> {
    private int id;
    private int age;
    private String name;

    public Student(int id, int age, String name) {
        this.id = id;
        this.age = age;
        this.name = name;
    }
    @Override
    public int compareTo(Student o) {
        //降序
        //return o.age - this.age;
        //升序
        return this.age - o.age;        
    }
    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", age=" + age +
                ", name='" + name + '\'' 这里说一下重写的 public int compareTo(Student o){} 这个方法，它返回三种 int 类型的值： 负整数，零 ，正整数。

返回值	含义
负整数	当前对象的值 < 比较对象的值 ， 位置排在前
零	当前对象的值 = 比较对象的值 ， 位置不变
正整数	当前对象的值 > 比较对象的值 ， 位置排在后
测试代码：
public static void main(String args[]){
        List<Student> list = new ArrayList<>();
        list.add(new Student(1,25,"关羽"));
        list.add(new Student(2,21,"张飞"));
        list.add(new Student(3,18,"刘备"));
        list.add(new Student(4,32,"袁绍"));
        list.add(new Student(5,36,"赵云"));
        list.add(new Student(6,16,"曹操"));
        System.out.println("排序前:");
        for (Student student : list) {
            System.out.println(student.toString());
        }
        //使用默认排序
        Collections.sort(list);
        System.out.println("默认排序后:");
        for (Student student : list) {
            System.out.println(student.toString());
        输出日志：
排序前:
Student{id=1, age=25, name='关羽'}
Student{id=2, age=21, name='张飞'}
Student{id=3, age=18, name='刘备'}
Student{id=4, age=32, name='袁绍'}
Student{id=5, age=36, name='赵云'}
Student{id=6, age=16, name='曹操'}
默认排序后:
Student{id=6, age=16, name='曹操'}
Student{id=3, age=18, name='刘备'}
Student{id=2, age=21, name='张飞'}
Student{id=1, age=25, name='关羽'}
Student{id=4, age=32, name='袁绍'}
Student{id=5, age=36, name='赵云'}
比较器的使用
这个时候需求又来了，默认是用 age 排序，但是有的时候需要用 id 来排序怎么办？ 这个时候比较器 ：Comparator 就排上用场了。

Comparator 的使用有两种方式：

Collections.sort(list,Comparator<T>）;
list.sort(Comparator<T>);
其实主要是看 Comparator 接口的实现，重写里面的 compare 方法
--------------------- 
作者：宇智波为什么带土 
来源：CSDN 
原文：https://blog.csdn.net/qq_23179075/article/details/78753136 
版权声明：本文为博主原创文章，转载请附上博文链接！
